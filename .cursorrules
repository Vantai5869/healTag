# Cursor Rules cho dự án Next.js i18n với Shadcn UI

## Ngôn ngữ và Framework
- Sử dụng TypeScript cho tất cả file code với strict mode
- Sử dụng Next.js 15 với App Router
- Sử dụng React 19 với hooks và functional components (tránh class components)
- Sử dụng Tailwind CSS cho styling
- Sử dụng Shadcn UI components
- Hỗ trợ đa ngôn ngữ với next-intl (chỉ English và Vietnamese)

## Cấu trúc dự án
- Tuân thủ cấu trúc thư mục hiện tại: `src/app/[locale]/`, `src/components/`, `src/i18n/`
- Đặt components UI trong `src/components/ui/`
- Đặt page components trong `src/components/pages/`
- Đặt translations trong `dictionary/` với format JSON
- Sử dụng absolute imports với `@/` prefix
- Tách biệt app/features/components/lib theo domain

## Code Style & TypeScript
- Enable strict TypeScript; tránh sử dụng `any`
- Prefer explicit types trong public APIs
- Sử dụng functional components với hooks
- Co-locate component-specific logic; extract shared logic to lib/
- Keep props minimal; derive UI từ state; tránh prop drilling
- Sử dụng interface thay vì type khi có thể
- Đặt tên file theo PascalCase cho components (VD: `HomeIndex.tsx`)
- Đặt tên file theo camelCase cho utilities và hooks

## Internationalization (i18n)
- Chỉ hỗ trợ 2 ngôn ngữ: English (en) và Vietnamese (vi)
- Sử dụng next-intl cho translations
- Đặt tất cả text có thể dịch trong dictionary files
- Sử dụng `useTranslations()` hook để lấy translations
- Format: `dictionary/en.json` và `dictionary/vi.json`
- Cấu trúc nested objects cho translations (VD: `Index.title`, `Footer.copyright`)

## UI & Styling
- Sử dụng Shadcn UI components làm base cho consistency
- Đặt custom UI components dưới `components/ui/`
- Follow accessible patterns (labels, aria attributes). Keyboard-first UX
- Sử dụng Tailwind cho styling; tránh inline styles trừ dynamic one-offs
- Sử dụng `cn()` utility từ `@/lib/utils` để merge classes
- Implement responsive design với Tailwind breakpoints
- Sử dụng CSS variables cho theming
- Hỗ trợ dark/light mode với next-themes

## Data Fetching & State Management
- Prefer server components và server actions khi có thể
- Cho client fetching, sử dụng React Query (TanStack Query) patterns trong lib/ hooks
- Centralize API clients; không hardcode endpoints trong components
- Local UI state trong component; cross-page state via Zustand stores
- Tránh global stores cho data có thể derive từ URL hoặc server
- Sử dụng React hooks (useState, useEffect, useContext)
- Implement custom hooks cho logic tái sử dụng
- Sử dụng URL state cho navigation state
- Sử dụng cookies/localStorage cho user preferences
- Sử dụng Zustand cho global state management khi cần thiết

## Error Handling
- Implement error boundaries
- Sử dụng try-catch cho async operations
- Hiển thị user-friendly error messages
- Log errors appropriately

## Routing & Pages
- Sử dụng Next.js App Router; colocate loading.tsx và error.tsx
- Dynamic routes phải validate params; handle not-found
- Sử dụng Next.js Image component cho images
- Implement lazy loading khi cần thiết
- Sử dụng dynamic imports cho code splitting
- Optimize bundle size với tree shaking

## Accessibility
- Sử dụng semantic HTML elements
- Implement proper ARIA labels và roles
- Đảm bảo keyboard navigation
- Sử dụng proper color contrast ratios
- Test với screen readers

## Git và Deployment
- Sử dụng conventional commits
- Tạo feature branches cho mỗi feature
- Sử dụng Vercel cho deployment
- Configure environment variables properly

## Code Organization
- Một component per file
- Export default cho main component
- Named exports cho utilities
- Group related imports together
- Sử dụng barrel exports khi cần thiết

## Documentation
- Comment complex logic
- Sử dụng JSDoc cho functions
- Maintain README.md với setup instructions
- Document API changes

## Security
- Validate user inputs
- Sanitize data trước khi render
- Sử dụng HTTPS
- Implement proper CORS policies
- Không expose sensitive data trong client code

## Performance & Observability
- Memoize heavy components và callbacks (memo, useMemo, useCallback)
- Code split large feature routes; lazy-load non-critical components
- Optimize images; sử dụng Next Image
- Add client-side logging cho important actions; tránh PII trong logs
- Sử dụng Vercel Analytics
- Monitor Core Web Vitals
- Track user interactions
- Monitor error rates

## Dependencies & Package Management
- Sử dụng `yarn` làm package manager
- State Management: `zustand` cho global state
- Data Fetching: `@tanstack/react-query` cho server state
- UI Components: `@radix-ui/*` và `shadcn/ui`
- Styling: `tailwindcss`, `tailwind-merge`, `clsx`
- Animation: `framer-motion` hoặc `motion`
- Icons: `lucide-react`
- Analytics: `@vercel/analytics`, `@vercel/speed-insights`

## Development Workflow
- Sử dụng `yarn dev` cho development
- Sử dụng `yarn build` để build production
- Sử dụng `yarn lint` để check code quality
- Sử dụng `yarn add` để thêm dependencies
- Test trên multiple browsers và devices

## Domain Conventions (This Project)
- Reuse backend column names trong UI contracts (English identifiers)
- Descriptions/helptext trong Vietnamese
- Features reflect domain: attendance, payroll, payslip
- Luôn maintain consistency giữa English và Vietnamese translations
- Sử dụng proper Vietnamese diacritics trong translations
- Test language switching functionality
- Đảm bảo RTL support được removed (không cần thiết cho Vietnamese)
- Sử dụng proper Vietnamese date/time formatting
- Implement proper Vietnamese number formatting

---

## Frontend Rules (Next.js · TypeScript)

- Project structure follows [PROJECT_STRUCTURE.md](mdc:PROJECT_STRUCTURE.md). Keep app/features/components/lib separated.

### Code Style
- Enable strict TypeScript; avoid any. Prefer explicit types in public APIs.
- Use functional components with hooks; avoid legacy class components.
- Co-locate component-specific logic; extract shared logic to lib/.
- Keep props minimal; derive UI from state; avoid prop drilling (use context/zustand when needed).

### UI & Styling
- Use shadcn/ui components for consistency. Put custom UI under components/ui/.
- Follow accessible patterns (labels, aria attributes). Keyboard-first UX.
- Use Tailwind for styling; avoid inline styles except dynamic one-offs.

### Data Fetching
- Prefer server components and server actions where possible.
- For client fetching, use SWR or React Query patterns in lib/ hooks.
- Centralize API clients; do not hardcode endpoints in components.

### State Management
- Local UI state in component; cross-page state via context/zustand sparingly.
- Avoid global stores for data that can be derived from URL or server.

### Routing & Pages
- Use Next.js App Router; colocate loading.tsx and error.tsx.
- Dynamic routes must validate params; handle not-found.

### Performance
- Memoize heavy components and callbacks (memo, useMemo, useCallback).
- Code split large feature routes; lazy-load non-critical components.
- Optimize images; use Next Image.

### Observability
- Add client-side logging for important actions; avoid PII in logs.

### Domain Conventions (This Project)
- Reuse backend column names in UI contracts (English identifiers). Descriptions/helptext in Vietnamese.
- Features reflect domain: attendance, payroll, payslip.
